
{{#*inline "exposeField" ~}}
{{#if type}}{{#if name}}
  {{#if description }}{{ multilineComment description }}
  {{/if}}
  {{ type }} get {{ name }} => fields.{{ name }};
  set {{ name }} ({{ type }} {{ name }}) => fields.{{ name }} = {{ name }};
{{~/if}}{{/if}}
{{~/inline~}}

{{#*inline "fragmentMixin" ~}}
{{ multilineComment description }}
mixin {{ className }} on {{ typeName }} {{
  classExtends
    mixins=(resolveMixins fields)
    fragments=fragmentsSpread
}} {
  static final String typeName = "{{ typeName }}";

  {{> selectionSet }}

}
{{~/inline~}}

{{~# if (hackFragmentFields "ensure_unique" name) ~}}

{{!-- add all fragment definitions to the base type hacker --}}
    {{~#eachBackwards innerModels ~}}
        {{~ hackFragmentBaseTypes "add" (concat (toPascalCase ../name) modelType) schemaBaseType ~}}
    {{~/eachBackwards~}}

    {{~ hackFragmentBaseTypes "add" (toPascalCase name) onType ~}}

    {{~ hackFragmentFields "add" name
        fields
        innerModels
        fragmentsSpread 
    ~}}
{{!-- --}}

{{~#eachBackwards innerModels }}
{{> fragmentMixin
      className=(concat (toPascalCase ../name) modelType)
      typeName=schemaBaseType
      fields=fields
      fragmentsSpread=fragmentsSpread
      contextModels=../innerModels
      contextName=(toPascalCase ../name)
}}

{{/eachBackwards~}}

{{> fragmentMixin
      className=(toPascalCase name)
      typeName=onType
      fields=fields
      fragmentsSpread=fragmentsSpread
      contextModels=innerModels
      contextName=(toPascalCase name)
}}

{{~/if~}}
