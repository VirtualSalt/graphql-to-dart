{{!--
    Leaving external mixins out of fragments because it overcomplicates things.  
    Because "mixin on BaseType, Foo, Bar" basically defines a multi-parent interface
    mixins=(resolveMixins fields)
--}}
{{#*inline "fragmentMixin" ~}}
{{ multilineComment description }}
mixin {{ className }} {{
  classExtends
    onMixin="true"
    baseType=typeName
    fragments=fragmentsSpread
}} {
  static final String typeName = "{{ typeName }}";

  {{> selectionSet }}

}
{{~/inline~}}

{{~# if (hackFragmentFields "ensure_unique" name=name) ~}}

{{!-- add all fragment fields to the field hacker --}}
    {{~ hackFragmentFields "add" name=name
        fields=fields
        fragments=fragmentsSpread 
        contextModels=innerModels
    ~}}
{{!-- --}}

{{~#eachBackwards innerModels }}

{{~#unless (
  ignoreType
    (concat (toPascalCase ../name) modelType)
      @root.config.replaceTypes
      schemaBaseType
      @root.config.irreducibleTypes
)}}

{{> selectionSetClass
      className=(concat (toPascalCase ../name) modelType)
      typeName=schemaBaseType
      fields=fields 
      fragmentsSpread=fragmentsSpread
      mixinFields=(hackFragmentFields "get" fragments=fragmentsSpread)
      contextModels=../innerModels
      contextName=(toPascalCase ../name)
}}

{{~/unless}}

{{/eachBackwards~}}

{{> fragmentMixin
      className=(toPascalCase name)
      typeName=onType
      fields=(hackFragmentFields 'get' fragments=fragmentsSpread fields=fields)
      fragmentsSpread=fragmentsSpread
      contextModels=innerModels
      contextName=(toPascalCase name)
}}

{{~/if~}}
