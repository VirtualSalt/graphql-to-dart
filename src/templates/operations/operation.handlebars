{{> defineClass
  fields=variables
  className=(concat (toPascalCase name) "Variables")
}}

{{#eachBackwards innerModels }}
{{~#unless (
  ignoreType
    (concat (toPascalCase ../name) modelType)
      @root.config.replaceTypes
      schemaBaseType
      @root.config.irreducibleTypes
)}}
{{> defineClass
      fields=(hackFragmentFields "get" fragmentsSpread fields )
      className=(concat (toPascalCase ../name) modelType)
      typeName=schemaBaseType
      contextModels=../innerModels
      contextName=(toPascalCase ../name)
      assignableTo=(
        withInputType
          (hackFragmentBaseTypes "get" (fragmentClassNames fragmentsSpread))
          @root.config.replaceTypes
          (concat (toPascalCase ../name) modelType)
          @root.config.generateFragmentHelpers
          (hackFragmentFields "list" fragmentsSpread)
      )
}}

{{/unless~}}
{{/eachBackwards}}

{{> defineClass
      fields=(hackFragmentFields "get" fragmentsSpread fields )
      className=(concat (toPascalCase name) (toPascalCase operationType))
      typeName=(concat (toPascalCase name) (toPascalCase operationType))
      contextModels=innerModels
      contextName=(toPascalCase name)
      assignableTo=(
        withInputType
          (hackFragmentBaseTypes "get" (fragmentClassNames fragmentsSpread))
          @root.config.replaceTypes
          (concat (toPascalCase name) (toPascalCase operationType))
          @root.config.generateFragmentHelpers
          (hackFragmentFields "list" fragmentsSpread)
      )
}}

