{{# if (hackFragmentFields "ensure_unique" name) ~}}

{{#eachBackwards innerModels }}


{{~ hackFragmentBaseTypes "add" (concat (toPascalCase ../name) modelType) schemaBaseType ~}}

{{> defineClass
      className=(concat (toPascalCase ../name) modelType)
      typeName=schemaBaseType
      assignableTo=(
        withInputType
          schemaBaseType
          @root.config.replaceTypes
          (concat (toPascalCase ../name) modelType)
          @root.config.generateFragmentHelpers
          (hackFragmentFields "get" fragmentsSpread fields)
      )
      fields=(hackFragmentFields "get" fragmentsSpread fields )
      contextModels=../innerModels
      contextName=(toPascalCase ../name)
}}

{{/eachBackwards}}

{{~ hackFragmentBaseTypes "add" (toPascalCase name) onType ~}}

{{> defineClass
      className=(toPascalCase name)
      typeName=onType
      assignableTo=(
        withInputType
          onType
          @root.config.replaceTypes
          (toPascalCase name)
          @root.config.generateFragmentHelpers
          (hackFragmentFields "get" fragmentsSpread fields)
      )
      fields=(hackFragmentFields "get" fragmentsSpread fields)
      contextModels=innerModels
      contextName=(toPascalCase name)
}}

{{~ hackFragmentFields "add" name
    fields
    innerModels
    fragmentsSpread 
~}}

{{/if}}
